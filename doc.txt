
实现lease 机制 选择leader

实现单值paxos 

实现多值 paxos

实现rnd编号

实现instance 编号

实现fast paxos 。proposal，与paxos学习 恢复机制分离了。

paxos 重点在于学习了。是的。把proposal 分离出来，成为状态机了。

实现分布式配置了。是的。 把学习和使用分离开了。

实现业务切换了？leader的选举了。然后使用高可用，作为配置服务了？

实现分布式锁了。是的。

log序列化多value存储。并在其基础上实现了分布式锁，内存key-val存储，以及配置高可用服务了。

内存log的精简变形。经过一系列的set，update，del操作后，导致日志量增加。可以直接转化为了set的方式了。

实现paxos服务。实现状态机。

并在状态机的基础上实现了内存key-val 存储。分布式锁。

多个proposer 即为锁的抢占者了。

leader/acceptor/proposer 通过 broad 和 learn 通信管道进行消息的学习和传递。

broad和learn管道根据消息队列实现。实现多值proposal。并保证数据的一致性。

leader 通过对每个item依次提议，实现了本地的一致性后，产生操作日志记录，并启动状态机服务。

状态机服务执行本地的日志记录，转移到最新状态了，开始处理客户端命令，并产成操作日志。状态机将操作日志转发给leader，若存储成功，则执行客户端命令

操作日志交由leader负责提议存储。 leader获取最新的item，leader则将日志广播到acceptor了。

优化。精简learn和borad的流程。由三级队列，改为两级队列。

状态机的最新状态，由leader执行，改为proposer执行。提升高可用。增加操作日志的本地存储。

leader的处理权限由获取状态机服务，改为获取客户端处理服务。

提升为acceptor增加学习能力。

